package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/taoshimomura/test-project-1/backend/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.CreateArticleInput) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: CreateArticle - createArticle"))
}

// SummarizeArticle is the resolver for the summarizeArticle field.
func (r *mutationResolver) SummarizeArticle(ctx context.Context, id string) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: SummarizeArticle - summarizeArticle"))
}

// RefreshArticles is the resolver for the refreshArticles field.
func (r *mutationResolver) RefreshArticles(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: RefreshArticles - refreshArticles"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context, limit *int32, offset *int32) ([]*model.Article, error) {
	log.Printf("Articles resolver called with limit=%v, offset=%v", limit, offset)

	now := time.Now().Format(time.RFC3339)

	// Create sample articles
	articles := []*model.Article{
		{
			ID:          "1",
			Title:       "Sample Article 1",
			Content:     "This is the content of sample article 1.",
			Source:      "Sample Source",
			URL:         "https://example.com/article1",
			PublishedAt: now,
			Summary:     stringPtr("This is a summary of sample article 1."),
			Tags:        []string{"tech", "news"},
			CreatedAt:   now,
			UpdatedAt:   now,
		},
		{
			ID:          "2",
			Title:       "Sample Article 2",
			Content:     "This is the content of sample article 2.",
			Source:      "Sample Source",
			URL:         "https://example.com/article2",
			PublishedAt: now,
			Summary:     stringPtr("This is a summary of sample article 2."),
			Tags:        []string{"science", "research"},
			CreatedAt:   now,
			UpdatedAt:   now,
		},
	}

	log.Printf("Created %d sample articles", len(articles))

	// Apply pagination if limit is specified
	if limit != nil {
		start := int32(0)
		if offset != nil {
			start = *offset
		}
		end := start + *limit
		if end > int32(len(articles)) {
			end = int32(len(articles))
		}
		if start >= end {
			log.Printf("No articles to return after pagination")
			return []*model.Article{}, nil
		}
		log.Printf("Returning articles from index %d to %d", start, end)
		return articles[start:end], nil
	}

	log.Printf("Returning all %d articles", len(articles))
	return articles, nil
}

// Helper function to create string pointer
func stringPtr(s string) *string {
	return &s
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, id string) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: Article - article"))
}

// SearchArticles is the resolver for the searchArticles field.
func (r *queryResolver) SearchArticles(ctx context.Context, query string) ([]*model.Article, error) {
	panic(fmt.Errorf("not implemented: SearchArticles - searchArticles"))
}

// Hello is the resolver for the hello field.
func (r *queryResolver) Hello(ctx context.Context) (string, error) {
	return "Hello, World!", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
